// Test script to verify the IMPROVED smart routing logic
// This tests that effectiveness-related queries are now correctly routed

System.debug('üß™ TESTING IMPROVED SMART ROUTING LOGIC');
System.debug('========================================');

// ============================================================================
// PHASE 1: TEST THE EXACT USER SCENARIO THAT WAS MISROUTED
// ============================================================================

System.debug('\n--- PHASE 1: Testing the Previously Misrouted Query ---');

// This is the exact query that was misrouted to Content Search instead of Efficacy
String misroutedQuery = 'can u show me top 5 best courses on Fast start?';

System.debug('üéØ User Query: "' + misroutedQuery + '"');
System.debug('üîç Expected: Should NOW route to OFFERING_EFFICACY agent');

try {
    System.debug('\nüîÑ Testing ANAgentSmartRouter.analyzeAndRoute...');
    
    ANAgentSmartRouter.RoutingDecision decision = 
        ANAgentSmartRouter.analyzeAndRoute(misroutedQuery);
    
    System.debug('üìä Routing Decision:');
    System.debug('  Recommended Agent: ' + decision.recommendedAgent);
    System.debug('  Confidence: ' + decision.confidence);
    System.debug('  Reasoning: ' + decision.reasoning);
    
    if (String.isNotBlank(decision.userGuidance)) {
        System.debug('  User Guidance: ' + decision.userGuidance);
    }
    
    if (decision.recommendedAgent == 'OFFERING_EFFICACY') {
        System.debug('‚úÖ SUCCESS: Query now correctly routed to Offering Efficacy Agent!');
        System.debug('üéØ The routing issue has been fixed');
    } else if (decision.recommendedAgent == 'CONTENT_SEARCH') {
        System.debug('‚ùå ISSUE: Query still being routed to Content Search');
        System.debug('üéØ The routing logic still needs improvement');
    } else {
        System.debug('‚ö†Ô∏è  UNKNOWN: Query routed to unexpected agent: ' + decision.recommendedAgent);
    }
    
} catch (Exception e) {
    System.debug('‚ùå Error in improved routing test: ' + e.getMessage());
}

// ============================================================================
// PHASE 2: TEST VARIOUS EFFECTIVENESS-RELATED QUERIES
// ============================================================================

System.debug('\n--- PHASE 2: Testing Various Effectiveness Queries ---');

List<String> effectivenessQueries = new List<String>{
    'Show me top 5 most effective courses on Data Cloud',
    'What are the best performing training programs?',
    'Find the most successful courses for sales teams',
    'Which courses have the highest impact?',
    'Show me top rated learning materials',
    'What are the most valuable training programs?',
    'Best courses for beginners',
    'Most effective training methods',
    'Top performing learning programs'
};

for (String query : effectivenessQueries) {
    try {
        System.debug('\nüîÑ Testing: "' + query + '"');
        
        ANAgentSmartRouter.RoutingDecision decision = 
            ANAgentSmartRouter.analyzeAndRoute(query);
        
        System.debug('  ‚Üí Routes to: ' + decision.recommendedAgent);
        System.debug('  ‚Üí Confidence: ' + decision.confidence);
        
        if (decision.recommendedAgent == 'OFFERING_EFFICACY') {
            System.debug('  ‚úÖ Correctly identified as effectiveness query');
        } else {
            System.debug('  ‚ùå Incorrectly routed to: ' + decision.recommendedAgent);
        }
        
    } catch (Exception e) {
        System.debug('  ‚ùå Error: ' + e.getMessage());
    }
}

// ============================================================================
// PHASE 3: TEST THE SCORING SYSTEM
// ============================================================================

System.debug('\n--- PHASE 3: Testing Scoring System ---');

try {
    System.debug('üîÑ Testing scoring for "best courses" vs "courses related to"');
    
    String effectivenessQuery = 'best courses for sales';
    String contentQuery = 'courses related to sales';
    
    ANAgentSmartRouter.RoutingDecision effectivenessDecision = 
        ANAgentSmartRouter.analyzeAndRoute(effectivenessQuery);
    
    ANAgentSmartRouter.RoutingDecision contentDecision = 
        ANAgentSmartRouter.analyzeAndRoute(contentQuery);
    
    System.debug('üìä Effectiveness Query ("best courses for sales"):');
    System.debug('  ‚Üí Routes to: ' + effectivenessDecision.recommendedAgent);
    System.debug('  ‚Üí Confidence: ' + effectivenessDecision.confidence);
    
    System.debug('üìä Content Query ("courses related to sales"):');
    System.debug('  ‚Üí Routes to: ' + contentDecision.recommendedAgent);
    System.debug('  ‚Üí Confidence: ' + contentDecision.confidence);
    
    if (effectivenessDecision.recommendedAgent == 'OFFERING_EFFICACY' && 
        contentDecision.recommendedAgent == 'CONTENT_SEARCH') {
        System.debug('‚úÖ SUCCESS: Scoring system working correctly!');
        System.debug('üéØ Effectiveness queries route to Efficacy, content queries to Content Search');
    } else {
        System.debug('‚ùå ISSUE: Scoring system not working as expected');
    }
    
} catch (Exception e) {
    System.debug('‚ùå Error testing scoring system: ' + e.getMessage());
}

// ============================================================================
// PHASE 4: SUMMARY OF IMPROVEMENTS
// ============================================================================

System.debug('\n--- PHASE 4: Summary of Routing Improvements ---');

System.debug('üéØ WHAT WE\'VE IMPROVED:');
System.debug('  1. ‚úÖ Higher weight for effectiveness keywords (2.0 vs 1.0)');
System.debug('  2. ‚úÖ Priority routing for effectiveness queries (> 0.1 threshold)');
System.debug('  3. ‚úÖ Better scoring algorithm that prevents misrouting');
System.debug('  4. ‚úÖ Explicit effectiveness detection before other categories');

System.debug('\nüí° EXPECTED ROUTING BEHAVIOR NOW:');
System.debug('  ‚Ä¢ "best courses" ‚Üí OFFERING_EFFICACY (with clarifying questions)');
System.debug('  ‚Ä¢ "most effective training" ‚Üí OFFERING_EFFICACY');
System.debug('  ‚Ä¢ "courses related to X" ‚Üí CONTENT_SEARCH');
System.debug('  ‚Ä¢ "top products by ACV" ‚Üí OPEN_PIPE');

System.debug('\nüîç KEY IMPROVEMENT:');
System.debug('  The query "can u show me top 5 best courses on Fast start?"');
System.debug('  Should now route to OFFERING_EFFICACY instead of CONTENT_SEARCH');
System.debug('  This will trigger the clarifying questions about which KPI the user means');

System.debug('\nüß™ IMPROVED ROUTING TEST COMPLETED');
System.debug('The system should now correctly route effectiveness queries!'); 