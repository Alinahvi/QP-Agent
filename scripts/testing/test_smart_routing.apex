// Test script to verify the smart routing logic
// This tests that effectiveness-related queries are correctly identified and routed

System.debug('üß™ TESTING SMART ROUTING LOGIC');
System.debug('=================================');

// ============================================================================
// PHASE 1: TEST THE EXACT USER SCENARIO THAT WAS MISROUTED
// ============================================================================

System.debug('\n--- PHASE 1: Testing the Misrouted Query ---');

// This is the exact query that was misrouted to Content Search instead of Efficacy
String misroutedQuery = 'can u show me top 5 best courses on Fast start?';

System.debug('üéØ User Query: "' + misroutedQuery + '"');
System.debug('üîç Expected: Should route to OFFERING_EFFICACY agent (not CONTENT_SEARCH)');

try {
    System.debug('\nüîÑ Testing ANAgentSmartRouter.analyzeAndRoute...');
    
    ANAgentSmartRouter.RoutingDecision decision = 
        ANAgentSmartRouter.analyzeAndRoute(misroutedQuery);
    
    System.debug('üìä Routing Decision:');
    System.debug('  Recommended Agent: ' + decision.recommendedAgent);
    System.debug('  Confidence: ' + decision.confidence);
    System.debug('  Reasoning: ' + decision.reasoning);
    
    if (String.isNotBlank(decision.userGuidance)) {
        System.debug('  User Guidance: ' + decision.userGuidance);
    }
    
    if (decision.recommendedAgent == 'OFFERING_EFFICACY') {
        System.debug('‚úÖ SUCCESS: Query correctly routed to Offering Efficacy Agent!');
        System.debug('üéØ This will prevent the misrouting issue you experienced');
    } else if (decision.recommendedAgent == 'CONTENT_SEARCH') {
        System.debug('‚ùå ISSUE: Query still being routed to Content Search');
        System.debug('üéØ This means the routing logic needs improvement');
    } else {
        System.debug('‚ö†Ô∏è  UNKNOWN: Query routed to unexpected agent: ' + decision.recommendedAgent);
    }
    
} catch (Exception e) {
    System.debug('‚ùå Error in smart routing test: ' + e.getMessage());
}

// ============================================================================
// PHASE 2: TEST VARIOUS EFFECTIVENESS-RELATED QUERIES
// ============================================================================

System.debug('\n--- PHASE 2: Testing Various Effectiveness Queries ---');

List<String> effectivenessQueries = new List<String>{
    'Show me top 5 most effective courses on Data Cloud',
    'What are the best performing training programs?',
    'Find the most successful courses for sales teams',
    'Which courses have the highest impact?',
    'Show me top rated learning materials',
    'What are the most valuable training programs?'
};

for (String query : effectivenessQueries) {
    try {
        System.debug('\nüîÑ Testing: "' + query + '"');
        
        ANAgentSmartRouter.RoutingDecision decision = 
            ANAgentSmartRouter.analyzeAndRoute(query);
        
        System.debug('  ‚Üí Routes to: ' + decision.recommendedAgent);
        System.debug('  ‚Üí Confidence: ' + decision.confidence);
        
        if (decision.recommendedAgent == 'OFFERING_EFFICACY') {
            System.debug('  ‚úÖ Correctly identified as effectiveness query');
        } else {
            System.debug('  ‚ùå Incorrectly routed to: ' + decision.recommendedAgent);
        }
        
    } catch (Exception e) {
        System.debug('  ‚ùå Error: ' + e.getMessage());
    }
}

// ============================================================================
// PHASE 3: TEST CONTENT SEARCH QUERIES (SHOULD NOT ROUTE TO EFFICACY)
// ============================================================================

System.debug('\n--- PHASE 3: Testing Content Search Queries ---');

List<String> contentQueries = new List<String>{
    'Show me courses related to Data Cloud',
    'Find training materials for Salesforce',
    'Search for curriculum about financial services',
    'What learning programs are available?',
    'Show me workshop materials'
};

for (String query : contentQueries) {
    try {
        System.debug('\nüîÑ Testing: "' + query + '"');
        
        ANAgentSmartRouter.RoutingDecision decision = 
            ANAgentSmartRouter.analyzeAndRoute(query);
        
        System.debug('  ‚Üí Routes to: ' + decision.recommendedAgent);
        System.debug('  ‚Üí Confidence: ' + decision.confidence);
        
        if (decision.recommendedAgent == 'CONTENT_SEARCH') {
            System.debug('  ‚úÖ Correctly identified as content search query');
        } else {
            System.debug('  ‚ùå Incorrectly routed to: ' + decision.recommendedAgent);
        }
        
    } catch (Exception e) {
        System.debug('  ‚ùå Error: ' + e.getMessage());
    }
}

// ============================================================================
// PHASE 4: TEST SALES/PIPELINE QUERIES
// ============================================================================

System.debug('\n--- PHASE 4: Testing Sales/Pipeline Queries ---');

List<String> salesQueries = new List<String>{
    'What are the top products by ACV in AMER ENTR?',
    'Show me pipeline data for EMEA region',
    'Which products have highest revenue?',
    'Find sales opportunities in Canada',
    'Show me territory performance data'
};

for (String query : salesQueries) {
    try {
        System.debug('\nüîÑ Testing: "' + query + '"');
        
        ANAgentSmartRouter.RoutingDecision decision = 
            ANAgentSmartRouter.analyzeAndRoute(query);
        
        System.debug('  ‚Üí Routes to: ' + decision.recommendedAgent);
        System.debug('  ‚Üí Confidence: ' + decision.confidence);
        
        if (decision.recommendedAgent == 'OPEN_PIPE') {
            System.debug('  ‚úÖ Correctly identified as sales/pipeline query');
        } else {
            System.debug('  ‚ùå Incorrectly routed to: ' + decision.recommendedAgent);
        }
        
    } catch (Exception e) {
        System.debug('  ‚ùå Error: ' + e.getMessage());
    }
}

// ============================================================================
// PHASE 5: TEST THE BUILT-IN TEST METHOD
// ============================================================================

System.debug('\n--- PHASE 5: Testing Built-in Test Method ---');

try {
    System.debug('üîÑ Testing ANAgentSmartRouter.testRoutingLogic...');
    
    ANAgentSmartRouter.testRoutingLogic();
    
    System.debug('‚úÖ SUCCESS: Built-in test method executed successfully');
    
} catch (Exception e) {
    System.debug('‚ùå Error in built-in test: ' + e.getMessage());
}

// ============================================================================
// PHASE 6: SUMMARY OF SMART ROUTING IMPROVEMENTS
// ============================================================================

System.debug('\n--- PHASE 6: Summary of Smart Routing Improvements ---');

System.debug('üéØ WHAT WE\'VE IMPLEMENTED:');
System.debug('  1. ‚úÖ Smart routing service that detects user intent');
System.debug('  2. ‚úÖ Effectiveness keyword detection (best, most effective, etc.)');
System.debug('  3. ‚úÖ Proper routing to Offering Efficacy Agent for effectiveness queries');
System.debug('  4. ‚úÖ Prevention of misrouting to Content Search');
System.debug('  5. ‚úÖ Confidence scoring and reasoning for routing decisions');

System.debug('\nüí° KEY EFFECTIVENESS KEYWORDS DETECTED:');
System.debug('  ‚Ä¢ best, most effective, top performing');
System.debug('  ‚Ä¢ highest performing, most successful, top rated');
System.debug('  ‚Ä¢ most impactful, highest impact, best results');
System.debug('  ‚Ä¢ most valuable, highest value, best outcomes');

System.debug('\nüîç EXPECTED ROUTING BEHAVIOR NOW:');
System.debug('  ‚Ä¢ "best courses" ‚Üí OFFERING_EFFICACY (with clarifying questions)');
System.debug('  ‚Ä¢ "courses related to X" ‚Üí CONTENT_SEARCH');
System.debug('  ‚Ä¢ "top products by ACV" ‚Üí OPEN_PIPE');
System.debug('  ‚Ä¢ "most effective training" ‚Üí OFFERING_EFFICACY');

System.debug('\nüß™ SMART ROUTING TEST COMPLETED');
System.debug('The system should now correctly route effectiveness queries!'); 