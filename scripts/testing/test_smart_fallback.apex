// Test script to verify the smart fallback logic
// This tests that the service only suggests KPI options when related courses actually exist

System.debug('üß™ TESTING SMART FALLBACK LOGIC');
System.debug('==================================');

// ============================================================================
// PHASE 1: TEST "EFFECTIVE" WITHOUT KPI (SHOULD ASK CLARIFYING QUESTIONS)
// ============================================================================

System.debug('\n--- PHASE 1: Testing "Effective" Without KPI ---');

// Test the exact user scenario that was failing
String searchTerm = 'Show me top 5 most effective data cloud course';

System.debug('üéØ User Query: "' + searchTerm + '"');
System.debug('üîç Expected: Should ask clarifying questions about which KPI');

try {
    System.debug('\nüîÑ Testing ANAgentOfferingEfficacyServiceBasic.searchEfficacyData...');
    
    ANAgentOfferingEfficacyServiceBasic.EfficacySearchResult serviceResult = 
        ANAgentOfferingEfficacyServiceBasic.searchEfficacyData(searchTerm, null, null, null, null, null, null, 5);
    
    System.debug('üìä Clarifying Questions Response:');
    System.debug('  Success: ' + serviceResult.success);
    System.debug('  Message: ' + serviceResult.message);
    
    if (!serviceResult.success) {
        System.debug('‚úÖ SUCCESS: Service correctly asked for clarifying questions!');
        System.debug('üéØ User needs to specify which KPI they mean by "effective"');
        
        // Show the clarifying questions
        System.debug('\nüìã Clarifying Questions Asked:');
        System.debug(serviceResult.message);
        
    } else {
        System.debug('‚ùå ISSUE: Service should have asked for clarifying questions');
    }
    
} catch (Exception e) {
    System.debug('‚ùå Error in clarifying questions test: ' + e.getMessage());
}

// ============================================================================
// PHASE 2: TEST WITH SPECIFIC KPI BUT NO DATA (SHOULD CHECK FOR RELATED COURSES)
// ============================================================================

System.debug('\n--- PHASE 2: Testing With Specific KPI But No Data ---');

String specificKPI = 'PIPE_QUALITY';
String specificSearch = 'data cloud';

System.debug('üéØ User Query: "' + specificSearch + '" with KPI: ' + specificKPI);
System.debug('üîç Expected: Should check if related courses exist and provide smart fallback');

try {
    System.debug('\nüîÑ Testing with specific KPI: ' + specificKPI);
    
    ANAgentOfferingEfficacyServiceBasic.EfficacySearchResult specificResult = 
        ANAgentOfferingEfficacyServiceBasic.searchEfficacyData(specificSearch, null, null, null, null, specificKPI, null, 5);
    
    System.debug('üìä Specific KPI Results:');
    System.debug('  Success: ' + specificResult.success);
    System.debug('  Message: ' + specificResult.message);
    System.debug('  Total Records: ' + specificResult.totalRecordCount);
    
    if (specificResult.success && specificResult.totalRecordCount == 0) {
        System.debug('‚úÖ SUCCESS: Service found no data and should provide smart fallback!');
        System.debug('üéØ Check if it suggests KPIs only when related courses exist');
        
        // Show the fallback message
        System.debug('\nüìã Fallback Message:');
        System.debug(specificResult.message);
        
        // Check if it's smart about suggesting KPIs
        if (specificResult.message.contains('Since no related courses exist in our APM library')) {
            System.debug('‚úÖ SMART: Service correctly identified no related courses exist');
            System.debug('üéØ It won\'t suggest KPIs when there\'s no data to query');
        } else if (specificResult.message.contains('Since related courses exist')) {
            System.debug('‚úÖ SMART: Service found related courses and suggests KPI options');
            System.debug('üéØ It only suggests KPIs when there\'s actually data to query');
        } else {
            System.debug('‚ö†Ô∏è  UNKNOWN: Fallback message format unclear');
        }
        
    } else if (specificResult.success && specificResult.totalRecordCount > 0) {
        System.debug('‚úÖ SUCCESS: Service found data with specific KPI!');
        System.debug('üéØ This shows the clarifying questions approach is working');
    } else {
        System.debug('‚ö†Ô∏è  Service had issues even with specific KPI');
    }
    
} catch (Exception e) {
    System.debug('‚ùå Error in specific KPI test: ' + e.getMessage());
}

// ============================================================================
// PHASE 3: TEST COURSE EFFICACY WITH "EFFECTIVE" (SHOULD ASK QUESTIONS)
// ============================================================================

System.debug('\n--- PHASE 3: Testing Course Efficacy with "Effective" ---');

try {
    System.debug('üîÑ Testing ANAgentOfferingEfficacyServiceBasic.getEfficacyForCourse...');
    
    ANAgentOfferingEfficacyServiceBasic.EfficacySearchResult courseResult = 
        ANAgentOfferingEfficacyServiceBasic.getEfficacyForCourse('effective data cloud courses');
    
    System.debug('üìä Course Efficacy Clarifying Questions:');
    System.debug('  Success: ' + courseResult.success);
    System.debug('  Message: ' + courseResult.message);
    
    if (!courseResult.success) {
        System.debug('‚úÖ SUCCESS: Course efficacy also asks clarifying questions!');
    } else {
        System.debug('‚ùå ISSUE: Course efficacy should have asked for clarifying questions');
    }
    
} catch (Exception e) {
    System.debug('‚ùå Error in course efficacy clarifying questions: ' + e.getMessage());
}

// ============================================================================
// PHASE 4: TEST SMART FALLBACK LOGIC
// ============================================================================

System.debug('\n--- PHASE 4: Testing Smart Fallback Logic ---');

try {
    System.debug('üîÑ Testing smart fallback with different scenarios...');
    
    // Test with a term that might have no related courses
    String noDataTerm = 'XYZ123_Course_That_Does_Not_Exist';
    
    ANAgentOfferingEfficacyServiceBasic.EfficacySearchResult noDataResult = 
        ANAgentOfferingEfficacyServiceBasic.searchEfficacyData(noDataTerm, null, null, null, null, null, null, 5);
    
    System.debug('üìä No Data Scenario Results:');
    System.debug('  Success: ' + noDataResult.success);
    System.debug('  Message: ' + noDataResult.message);
    
    if (!noDataResult.success || noDataResult.totalRecordCount == 0) {
        System.debug('‚úÖ SUCCESS: Service handled no data scenario!');
        
        // Check if it's smart about not suggesting KPIs
        if (noDataResult.message.contains('Since no related courses exist in our APM library')) {
            System.debug('üéØ SMART: Service correctly identified no related courses');
            System.debug('‚úÖ It won\'t suggest KPIs when there\'s no data to query');
        } else if (noDataResult.message.contains('Since related courses exist')) {
            System.debug('üéØ SMART: Service found related courses and suggests KPI options');
            System.debug('‚úÖ It only suggests KPIs when there\'s actually data to query');
        } else {
            System.debug('‚ö†Ô∏è  UNKNOWN: Fallback message format unclear');
        }
    }
    
} catch (Exception e) {
    System.debug('‚ùå Error testing smart fallback: ' + e.getMessage());
}

// ============================================================================
// PHASE 5: SUMMARY OF SMART FALLBACK IMPROVEMENTS
// ============================================================================

System.debug('\n--- PHASE 5: Summary of Smart Fallback Improvements ---');

System.debug('üéØ WHAT WE\'VE IMPROVED:');
System.debug('  1. ‚úÖ Smart fallback logic that checks if related courses exist');
System.debug('  2. ‚úÖ Only suggests KPIs when there\'s actually data to query');
System.debug('  3. ‚úÖ Prevents suggesting irrelevant KPI options');
System.debug('  4. ‚úÖ Provides appropriate fallback based on data availability');
System.debug('  5. ‚úÖ Clear guidance on when KPIs are useful vs. not');

System.debug('\nüí° SMART FALLBACK SCENARIOS:');
System.debug('  ‚Ä¢ No related courses exist ‚Üí Don\'t suggest KPIs, focus on finding courses');
System.debug('  ‚Ä¢ Related courses exist but no data for current filters ‚Üí Suggest KPI options');
System.debug('  ‚Ä¢ User says "effective" without KPI ‚Üí Ask clarifying questions');
System.debug('  ‚Ä¢ User specifies KPI ‚Üí Return relevant data or smart fallback');

System.debug('\nüîç EXPECTED USER EXPERIENCE NOW:');
System.debug('  ‚Ä¢ User asks: "Show me top 5 most effective data cloud course"');
System.debug('  ‚Ä¢ Agent responds: "Which KPI do you mean by effective?" + List of KPIs');
System.debug('  ‚Ä¢ User chooses: "PIPE_QUALITY"');
System.debug('  ‚Ä¢ If no data: Agent checks if related courses exist');
System.debug('  ‚Ä¢ If related courses exist: Agent suggests trying different KPIs');
System.debug('  ‚Ä¢ If no related courses: Agent focuses on finding courses first');

System.debug('\nüß™ SMART FALLBACK TEST COMPLETED');
System.debug('The service should now be much smarter about when to suggest KPIs!'); 